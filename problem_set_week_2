# -*- coding: utf-8 -*-
#HW Week 4


#Problem Set 1
'''Assume s is a string of lower case characters.

Write a program that counts up the number of vowels contained in the string s. 
Valid vowels are: 'a', 'e', 'i', 'o', and 'u'. For example, if
s = 'azcbobobegghakl', your program should print:

Number of vowels: 5
For problems such as these, do not include raw_input statements or define the 
variable s in any way. Our automated testing will provide a value of s for you
- so the code you submit in the following box should assume s is already defined.
If you are confused by this instruction, please review L4 Problems 10 and 11 
before you begin this problem set.'''


theCount = 0
for vowels in s:
    if vowels == 'a' or vowels == 'e' or vowels == 'i' or vowels == 'o' or\
    vowels == 'u':
        theCount+=1
print ('Number of vowels: ', theCount)

'''Assume s is a string of lower case characters.

Write a program that prints the number of times the string 'bob' occurs in s. 
For example, if s = 'azcbobobegghakl', then your program should print

Number of times bob occurs is: 2
For problems such as these, do not include raw_input statements or define the 
variable s in any way. Our automated testing will provide a value of s for you
- so the code you submit in the following box should assume s is already 
defined. If you are confused by this instruction, please review L4 Problems 10
and 11 before you begin this problem set.'''

s = 'asdfbobfdbobob'

'''Assume s is a string of lower case characters.

Write a program that prints the number of times the string 'bob' occurs in s. 
For example, if s = 'azcbobobegghakl', then your program should print

Number of times bob occurs is: 2
For problems such as these, do not include raw_input statements or define the 
variable s in any way. Our automated testing will provide a value of s for you
- so the code you submit in the following box should assume s is already 
defined. If you are confused by this instruction, please review L4 Problems 10
and 11 before you begin this problem set.'''

s = 'asdfbobfdbobob'

numberBob = 0
for letters in s:
    if s[letters:letters+3]=='bob':
        numberBob+=1
print 'Number of times bob occurs is:', numberBob





'''Assume s is a string of lower case characters.

Write a program that prints the longest substring of s in which the letters 
occur in alphabetical order. For example, if s = 'azcbobobegghakl', then your 
program should print

Longest substring in alphabetical order is: beggh
In the case of ties, print the first substring. For example, if s = 'abcbcd', 
then your program should print

Longest substring in alphabetical order is: abc
For problems such as these, do not include raw_input statements or define the 
variable s in any way. Our automated testing will provide a value of s for you 
- so the code you submit in the following box should assume s is already 
defined. If you are confused by this instruction, please review L4 Problems 10 
and 11 before you begin this problem set.

Note: This problem is fairly challenging. We encourage you to work smart. If 
you've spent more than a few hours on this problem, we suggest that you move on 
to a different part of the course. If you have time, come back to this problem 
after you've had a break and cleared your head.'''

s='abczazazazabcdzzz'
longestString=''
subString = ''

for x in range(len(s)):
    if s[x] >= s[x-1]:
        subString+=s[x]
        if len(subString)>len(longestString):
            longestString = subString
    else:
        subString = s[x]
    

print 'Longest substring in alphabetical order is:', longestString



# Problem 2
'''PAYING OFF CREDIT CARD DEBT

Each month, a credit card statement will come with the option for you to pay a 
minimum amount of your charge, usually 2% of the balance due. However, the 
credit card company earns money by charging interest on the balance that you 
don't pay. So even if you pay credit card payments on time, interest is still 
accruing on the outstanding balance.

Say you've made a $5,000 purchase on a credit card with an 18% annual interest 
rate and a 2% minimum monthly payment rate. If you only pay the minimum monthly 
amount for a year, how much is the remaining balance?

You can think about this in the following way.

At the beginning of month 0 (when the credit card statement arrives), assume you 
owe an amount we will call b0 (b for balance; subscript 0 to indicate this is 
the balance at month 0).

Any payment you make during that month is deducted from the balance. Let's call 
the payment you make in month 0, p0. Thus, your unpaid balance for month 0, ub0,
is equal to b0−p0.

ub0=b0−p0

At the beginning of month 1, the credit card company will charge you interest 
on your unpaid balance. So if your annual interest rate is r, then at the 
beginning of month 1, your new balance is your previous unpaid balance ub0, plus 
the interest on this unpaid balance for the month. In algebra, this new balance 
would be

b1=ub0+r12.0⋅ub0

In month 1, we will make another payment, p1. That payment has to cover some of 
the interest costs, so it does not completely go towards paying off the original 
charge. The balance at the beginning of month 2, b2, can be calculated by first 
calculating the unpaid balance after paying p1, then by adding the interest 
accrued:

ub1=b1−p1
b2=ub1+r12.0⋅ub1

If you choose just to pay off the minimum monthly payment each month, you will 
see that the compound interest will dramatically reduce your ability to lower 
your debt.

Let's look at an example. If you've got a $5,000 balance on a credit card with 
18% annual interest rate, and the minimum monthly payment is 2% of the current 
balance, we would have the following repayment schedule if you only pay the
minimum payment each month:

Month	Balance	Minimum Payment	Unpaid Balance	Interest
0	5000.00	100 (= 5000 * 0.02)	4900 (= 5000 - 100)	73.50 (= 0.18/12.0 * 4900)
1	4973.50 (= 4900 + 73.50)	99.47 (= 4973.50 * 0.02)	4874.03 (= 4973.50 - 99.47)	73.11 (= 0.18/12.0 * 4874.03)
2	4947.14 (= 4874.03 + 73.11)	98.94 (= 4947.14 * 0.02)	4848.20 (= 4947.14 - 98.94)	72.72 (= 0.18/12.0 * 4848.20)

You can see that a lot of your payment is going to cover interest, and if you 
work this through month 12, you will see that after a year, you will have paid 
$1165.63 and yet you will still owe $4691.11 on what was originally a $5000.00 
debt. Pretty depressing!'''


'''PROBLEM 1: PAYING THE MINIMUM  (10 points possible)
Write a program to calculate the credit card balance after one year if a person 
only pays the minimum monthly payment required by the credit card company each 
month.

The following variables contain values as described below:

balance - the outstanding balance on the credit card

annualInterestRate - annual interest rate as a decimal

monthlyPaymentRate - minimum monthly payment rate as a decimal

For each month, calculate statements on the monthly payment and remaining 
balance, and print to screen something of the format:

Month: 1
Minimum monthly payment: 96.0
Remaining balance: 4784.0
Be sure to print out no more than two decimal digits of accuracy - so print

Remaining balance: 813.41
instead of

Remaining balance: 813.4141998135 
Finally, print out the total amount paid that year and the remaining balance at 
the end of the year in the format:

Total paid: 96.0
Remaining balance: 4784.0
A summary of the required math is found below:

Monthly interest rate= (Annual interest rate) / 12.0
Minimum monthly payment = (Minimum monthly payment rate) x (Previous balance)
Monthly unpaid balance = (Previous balance) - (Minimum monthly payment)
Updated balance each month = (Monthly unpaid balance) + (Monthly interest rate x 
Monthly unpaid balance)

Note that the grading script looks for the order in which each value is printed 
out. We provide sample test cases below; we suggest you develop your code on 
your own machine, and make sure your code passes the sample test cases, before 
you paste it into the box below.

Test Cases to Test Your Code With. Be sure to test these on your own machine - 
and that you get the same output! - before running your code on this webpage!
Click to See Problem 1 Test Cases

The code you paste into the following box should not specify the values for the
variables balance, annualInterestRate, or monthlyPaymentRate - our test code 
will define those values before testing your submission.'''


balance = 4842
annualInterestRate = 0.2
monthlyPaymentRate = 0.04

month = 0
totalPaid = 0



while month < 12:
    month+=1
    monthlyInterestRate = (annualInterestRate/12.0)
    minimumMonthlyPayment = round((monthlyPaymentRate)*(balance), 2)
    monthlyUnpaidBalance = round((balance) - (minimumMonthlyPayment), 2)
    updatedBalanceEachMonth = round((monthlyUnpaidBalance)+\
    (monthlyInterestRate*monthlyUnpaidBalance), 2)
    
    print 'Month:', month
    print 'Minimum monthly payment:', minimumMonthlyPayment
    print 'Remaining balance:', updatedBalanceEachMonth
    balance = updatedBalanceEachMonth
    totalPaid += minimumMonthlyPayment
    
print 'Total paid:', totalPaid
print 'Remaining balance:', balance



'''PROBLEM 2: PAYING DEBT OFF IN A YEAR  (15 points possible)
Now write a program that calculates the minimum fixed monthly payment needed in
order pay off a credit card balance within 12 months. By a fixed monthly 
payment, we mean a single number which does not change each month, but instead 
is a constant amount that will be paid each month.

In this problem, we will not be dealing with a minimum monthly payment rate.

The following variables contain values as described below:

balance - the outstanding balance on the credit card

annualInterestRate - annual interest rate as a decimal

The program should print out one line: the lowest monthly payment that will pay 
off all debt in under 1 year, for example:

Lowest Payment: 180 
Assume that the interest is compounded monthly according to the balance at the 
end of the month (after the payment for that month is made). The monthly payment
must be a multiple of $10 and is the same for all months. Notice that it is 
possible for the balance to become negative using this payment scheme, which is 
okay. A summary of the required math is found below:

Monthly interest rate = (Annual interest rate) / 12.0
Monthly unpaid balance = (Previous balance) - (Minimum monthly payment)
Updated balance each month = (Monthly unpaid balance) + (Monthly interest rate 
x Monthly unpaid balance)

Test Cases to Test Your Code With. Be sure to test these on your own machine - 
and that you get the same output! - before running your code on this webpage!
Click to See Problem 2 Test Cases

The code you paste into the following box should not specify the values for the
variables balance or annualInterestRate - our test code will define those values
before testing your submission.'''


balance = 3926
annualInterestRate = 0.2
lowestPayment = 0
subBalance = balance

def balanceAfter12(x):
    for months in range(1,13):
            monthlyInterestRate=(annualInterestRate)/12.0
            monthlyUnpaidBalance=(x)-(lowestPayment)
            x=(monthlyUnpaidBalance)+\
            (monthlyInterestRate*monthlyUnpaidBalance)
    return x

while subBalance >0:
    subBalance = balance
    lowestPayment+=10
    subBalance = balanceAfter12(subBalance)
    
    
print 'Lowest Payment:', lowestPayment

'''You'll notice that in Problem 2, your monthly payment had to be a multiple of 
$10. Why did we make it that way? You can try running your code locally so that 
the payment can be any dollar and cent amount (in other words, the monthly 
payment is a multiple of $0.01). Does your code still work? It should, but you 
may notice that your code runs more slowly, especially in cases with very large 
balances and interest rates. (Note: when your code is running on our servers, 
there are limits on the amount of computing time each submission is allowed, so 
your observations from running this experiment on the grading system might be 
limited to an error message complaining about too much time taken.)

Well then, how can we calculate a more accurate fixed monthly payment than we 
did in Problem 2 without running into the problem of slow code? We can make this
program run faster using a technique introduced in lecture - bisection search!

The following variables contain values as described below:

balance - the outstanding balance on the credit card

annualInterestRate - annual interest rate as a decimal

To recap the problem: we are searching for the smallest monthly payment such 
that we can pay off the entire balance within a year. What is a reasonable lower 
bound for this payment value? $0 is the obvious anwer, but you can do better 
than that. If there was no interest, the debt can be paid off by monthly 
payments of one-twelfth of the original balance, so we must pay at least this 
much every month. One-twelfth of the original balance is a good lower bound.

What is a good upper bound? Imagine that instead of paying monthly, we paid off 
the entire balance at the end of the year. What we ultimately pay must be 
greater than what we would've paid in monthly installments, because the interest 
was compounded on the balance we didn't pay off each month. So a good upper 
bound for the monthly payment would be one-twelfth of the balance, after having 
its interest compounded monthly for an entire year.

In short:

Monthly interest rate = (Annual interest rate) / 12.0
Monthly payment lower bound = Balance / 12
Monthly payment upper bound = (Balance x (1 + Monthly interest rate)12) / 12.0

Write a program that uses these bounds and bisection search (for more info check 
out the Wikipedia page on bisection search) to find the smallest monthly payment 
to the cent (no more multiples of $10) such that we can pay off the debt within
a year. Try it out with large inputs, and notice how fast it is (try the same 
large inputs in your solution to Problem 2 to compare!). Produce the same return
value as you did in Problem 2.

Note that if you do not use bisection search, your code will not run - your code 
only has 30 seconds to run on our servers.

Test Cases to Test Your Code With. Be sure to test these on your own machine - 
and that you get the same output! - before running your code on this webpage!
Click to See Problem 3 Test Cases

The code you paste into the following box should not specify the values for the 
variables balance or annualInterestRate - our test code will define those values 
before testing your submission.'''

balance = 999999
annualInterestRate = 0.18

subBalance = balance


monthlyInterestRate = (annualInterestRate)/12.0
mpLowerBound = balance/12
mpUpperBound = (balance *(1+monthlyInterestRate)**12)/12.0

lowestPayment = (mpLowerBound + mpUpperBound)/2.0

def after12(x):
    for months in range(12):
        monthlyUnpaidBalance=(x)-(lowestPayment)
        x=(monthlyUnpaidBalance)+\
        (monthlyInterestRate*monthlyUnpaidBalance)
    return x

while abs(after12(subBalance)) > 0.01:
    subBalance = balance
    lowestPayment = (mpLowerBound + mpUpperBound)/2.0
    value = after12(subBalance)
    
    if value > 0:
        mpLowerBound = lowestPayment
    elif value < 0:
        mpUpperBound = lowestPayment
        
print "lowest payment:", round(lowestPayment, 2)
